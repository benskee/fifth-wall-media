"const fs = require('fs');\r\nconst _ = require('lodash');\r\n\r\n// Relative path to folder to record\r\nconst root = './'\r\n\r\n// Interval between saves in miliseconds\r\nconst interval = 5000\r\n\r\n// Regex list of folders to skip\r\nconst skipFolders = /.*node_modules|config|public|\\.git/\r\n\r\n// Regex list of files to skip\r\nconst skipFiles = /.*setupTests|projectRecorder|\\.env|README|(package-lock\\.json)|gitignore/\r\n\r\n\r\nconst projectDict = {};\r\nvar s = 0\r\n\r\nconst copyFile = fileName => {\r\n    var data = fs.readFileSync(fileName, { encoding: \"utf8\" });\r\n    var json = JSON.stringify(data);\r\n    var pathSplit = fileName.replace(root + '\\\\', '').split('.');\r\n    var currentPath = pathSplit[pathSplit.length-2]\r\n    var fileType = pathSplit[pathSplit.length - 1]\r\n    var name = currentPath.split('\\\\').pop() + '.' + fileType;\r\n    var objectPath = currentPath.split('\\\\').join('.');\r\n\r\n    if (!_.get(projectDict, objectPath)) {\r\n        _.set(projectDict, objectPath, {\r\n            folder: false,\r\n            fileType: fileType,\r\n            objectPath: objectPath,\r\n            start: s,\r\n            lastUpdated: s,\r\n            name: name,\r\n            stamps: {\r\n                [s]: json\r\n            }\r\n        });\r\n    } else {\r\n        var lastUpdated = _.get(projectDict, objectPath + '.lastUpdated');\r\n        if (_.get(projectDict, objectPath + '.stamps.' + lastUpdated) !== json) {\r\n            _.set(projectDict, objectPath + '.stamps.' + s, json);\r\n            _.set(projectDict, objectPath + '.lastUpdated', s);\r\n        }\r\n    }\r\n};\r\n\r\nconst walkDir = dir => {\r\n    var files = fs.readdirSync(dir);\r\n    for (var i = 0; i < files.length; i++) {\r\n        var currentPath = `${dir}\\\\${files[i]}`;\r\n        var op = currentPath.replace((root + '\\\\'), '');\r\n        var objectPath = op.split('\\\\').join('.');\r\n        if (fs.statSync(currentPath).isDirectory() === true) {\r\n            if (currentPath.match(skipFolders) == null) {\r\n                if (!_.get(projectDict, objectPath)) {\r\n                    _.set(projectDict, objectPath, {\r\n                        folder: true,\r\n                        start: s\r\n                    });\r\n                }\r\n                walkDir(currentPath);\r\n            }\r\n        } else {\r\n            if (currentPath.match(skipFiles) == null) {\r\n                copyFile(currentPath);\r\n            }\r\n        }\r\n        };\r\n};\r\n\r\n\r\nconst saver = () => {\r\n    walkDir(root);\r\n    var projectString = JSON.stringify(projectDict);\r\n    fs.writeFileSync('projectFile.json', projectString);\r\n    console.log('file saved', s);\r\n    s++\r\n}\r\n\r\nsetInterval(saver, interval)\r\n"